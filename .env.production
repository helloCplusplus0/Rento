# Rento 生产环境配置参考
# 此文件仅作为生产环境配置的参考模板
# 实际部署时请复制 .env.example 为 .env 并修改相应配置
# 
# 推荐部署方式：
# - 主要推荐: podman-compose up -d
# - 备选方案: docker-compose up -d

# ===========================================
# 应用基础配置
# ===========================================
NODE_ENV=production
PORT=3001

# 应用访问地址 (生产环境需要修改为实际域名)
NEXT_PUBLIC_APP_URL=https://your-domain.com
NEXTAUTH_URL=https://your-domain.com
NEXTAUTH_SECRET=your-super-secret-key-here-32-chars-minimum

# ===========================================
# 数据库配置 (PostgreSQL)
# ===========================================
DATABASE_URL=postgresql://rento:your-secure-password@postgres:5432/rento_production

# PostgreSQL 服务配置
POSTGRES_DB=rento_production
POSTGRES_USER=rento
POSTGRES_PASSWORD=your-secure-password-here-change-this
POSTGRES_PORT=5432

# ===========================================
# 应用服务配置
# ===========================================
BACKUP_DIR=/app/backups
LOG_DIR=/app/logs

# Redis 缓存配置
REDIS_URL=redis://redis:6379
REDIS_PORT=6379

# ===========================================
# 监控和性能配置
# ===========================================
ENABLE_MONITORING=true
PERFORMANCE_MONITORING=true
LOG_LEVEL=info

# ===========================================
# 网络和端口配置
# ===========================================
HTTP_PORT=80
HTTPS_PORT=443

# ===========================================
# 安全配置
# ===========================================
ALLOWED_ORIGINS=https://your-domain.com
CORS_ENABLED=true
MAX_REQUEST_SIZE=10mb
REQUEST_TIMEOUT=30000

# ===========================================
# 邮件配置 (告警通知)
# ===========================================
SMTP_HOST=smtp.your-provider.com
SMTP_PORT=587
SMTP_USER=your-email@domain.com
SMTP_PASS=your-email-password
ALERT_EMAIL=admin@your-domain.com

# ===========================================
# SSL/TLS 配置
# ===========================================
SSL_CERT_PATH=/etc/nginx/ssl/cert.pem
SSL_KEY_PATH=/etc/nginx/ssl/key.pem

# ===========================================
# 生产环境部署注意事项
# ===========================================
# 1. 安全性：
#    - 修改所有默认密码和密钥
#    - 使用强密码 (至少16位，包含大小写字母、数字、特殊字符)
#    - 定期更新密钥和证书
# 
# 2. 性能优化：
#    - 根据服务器配置调整 PostgreSQL 参数
#    - 配置适当的 Redis 内存限制
#    - 启用 Nginx 压缩和缓存
# 
# 3. 监控告警：
#    - 配置邮件告警通知
#    - 定期检查日志文件
#    - 监控系统资源使用情况
# 
# 4. 数据备份：
#    - 配置自动备份策略
#    - 定期测试数据恢复流程
#    - 备份文件异地存储