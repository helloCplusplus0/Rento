# Rento 房屋租赁管理系统 - 统一容器编排配置
# 兼容 Docker Compose 和 Podman Compose
# 支持开发、测试、生产环境的统一部署
# 推荐使用: podman-compose up -d
# 备选使用: docker-compose up -d

version: '3.8'

services:
  app:
    # 使用预构建的镜像，支持多架构 (amd64/arm64)
    image: ghcr.io/hellocplusplus0/rento:latest
    container_name: ${CONTAINER_PREFIX:-rento}-app
    ports:
      - '${APP_PORT:-3001}:3001'
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - DATABASE_URL=postgresql://${POSTGRES_USER:-rento}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-rento_production}
      - BACKUP_DIR=/app/backups
      - LOG_DIR=/app/logs
      - NEXTAUTH_URL=${NEXTAUTH_URL:-http://localhost:3001}
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET}
      - REDIS_URL=${REDIS_URL:-redis://redis:6379}
      - ENABLE_MONITORING=${ENABLE_MONITORING:-true}
      - PERFORMANCE_MONITORING=${PERFORMANCE_MONITORING:-true}
      - LOG_LEVEL=${LOG_LEVEL:-info}
    volumes:
      - ./backups:/app/backups
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    restart: unless-stopped
    networks:
      - rento-network
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3001/api/health']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  postgres:
    # PostgreSQL 16 数据库服务
    image: postgres:16-alpine
    container_name: ${CONTAINER_PREFIX:-rento}-postgres
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-rento_production}
      - POSTGRES_USER=${POSTGRES_USER:-rento}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
      - ./scripts/init-db.sh:/docker-entrypoint-initdb.d/init-db.sh
    ports:
      - '${POSTGRES_PORT:-5432}:5432'
    healthcheck:
      test:
        [
          'CMD-SHELL',
          'pg_isready -U ${POSTGRES_USER:-rento} -d ${POSTGRES_DB:-rento_production}',
        ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    networks:
      - rento-network
    # PostgreSQL 性能优化配置
    command: >
      postgres
      -c shared_preload_libraries=pg_stat_statements
      -c pg_stat_statements.track=all
      -c max_connections=100
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200

  # Nginx 反向代理 (生产环境可选)
  nginx:
    image: nginx:alpine
    container_name: ${CONTAINER_PREFIX:-rento}-nginx
    ports:
      - '${HTTP_PORT:-80}:80'
      - '${HTTPS_PORT:-443}:443'
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - app
    restart: unless-stopped
    networks:
      - rento-network
    # 仅在需要时启用 (可通过环境变量控制)
    profiles:
      - nginx
      - production

  # Redis 缓存服务 (可选)
  redis:
    image: redis:7-alpine
    container_name: ${CONTAINER_PREFIX:-rento}-redis
    ports:
      - '${REDIS_PORT:-6379}:6379'
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - rento-network
    # Redis 配置优化
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 3s
      retries: 3

# 数据卷配置
volumes:
  postgres_data:
    driver: local
    # Podman 兼容性：使用本地驱动
  redis_data:
    driver: local

# 网络配置
networks:
  rento-network:
    driver: bridge
    # 修改网段避免冲突
    ipam:
      config:
        - subnet: 172.25.0.0/16
